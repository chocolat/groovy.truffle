(trigger
    (tab pa))

(name [Create Package Declaration])

(only-in source.groovy)

(input nothing)

(output after-selected)

(save nothing)

(script [#!/usr/bin/env ruby -w
# Generates a package statement based on conventions for the name of the source directory.
# If the root source folder name isn't matched either log a bug to get it added to the
# default list or define an environment variable named TM_JAVA_SOURCE_FOLDER_REGEX with
# a value of the regex to use to match folder names.
#

package = []
package_regex = /$(src|tst)$/ # common source folder names
package_regex = /^(#{ENV['TM_JAVA_SOURCE_FOLDER_REGEX']})$/ if ENV['TM_JAVA_SOURCE_FOLDER_REGEX']

Dir.getwd.split(File::SEPARATOR).reverse.each do |folder|
  if folder !~ package_regex
    package << folder
  else
    break
  end
end

if !package.empty?
  puts "package #{package.reverse.join('.')}"
end])